<?php

namespace App\Http\Controllers;

use App\Models\Post;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Storage;
use Illuminate\Validation\Rule;

class PostController extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index()
    {
        //
        $translation = [
            'image' => 'üñºÔ∏è ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û',
            'video' => 'üé• ‡∏ß‡∏¥‡∏î‡∏¥‡πÇ‡∏≠'
        ];
        $posts = Post::orderBy('order')->get();
        $deleted_posts = Post::onlyTrashed()->get();
        return view('manage.post', compact('posts', 'deleted_posts', 'translation'));
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     */
    /**  POST /manage/post  ‚Äì¬†‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà */
    public function store(Request $request)
    {
        $data = $request->all();
        /* upload file ‚Üí storage/app/public/posts/‚Ä¶ */
        // (option) ‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô video ‡πÅ‡∏•‡∏∞ duration‚ÄØ‚â†‚ÄØ-1
        // if ($data['type'] === 'video' && $data['duration'] !== -1) {
        //     // NOTE: ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ FFprobe; ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ dev ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡∏∞ helper exist
        //     $videoSeconds = get_video_duration(storage_path("app/public/{$path}")); // helper ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
        //     abort_if($data['duration'] > $videoSeconds, 422, 'Duration ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠');
        // }
        $path = $request->file('file')->store('posts', 'public');


        $result = Post::create([
            'user_id'   => Auth::id(),
            'caption'   => $data['caption'],
            'is_mute'   => isset($data['is_mute']),
            'filename'  => $path,
            'type'      => $data['type'],
            'is_public' => isset($data['is_public']),
            'duration'  => $data['duration'] ?? -1,
            'order'     => $data['order'] ?? 0,
        ]);

        return back()->with('success', '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
    }

    /**
     * Display the specified resource.
     */
    public function show($id)
    {
        $post = Post::find($id);
        if (!$post) return response()->json(["success" => false], 404);
        return response()->json(["success" => true, "post" => $post]);
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit(Post $post)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     */
    /**  PUT /manage/post/{post}  ‚Äì¬†‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏û‡∏™‡∏ï‡πå */
    public function update(Request $request, Post $post)
    {
        $data = $request->all();
        $data['duration'] = isset($data['duration']) ? $data['duration'] : -1;
        $data['is_public'] = isset($data['is_public']);
        $data['is_mute'] = isset($data['is_mute']);
        if ($request->hasFile('file')) {
            // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà
            Storage::disk('public')->delete($post->filename);
            $data['filename'] = $request->file('file')->store('posts', 'public');
            $data['type']     = str_starts_with($request->file('file')->getMimeType(), 'video') ? 'video' : 'image';
        }
        $result = $post->update($data);
        return back()->with('success', '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÅ‡∏•‡πâ‡∏ß');
    }

    /**
     * Remove the specified resource from storage.
     */
    /**  DELETE /manage/post/{post} ‚Äì¬†Soft‚Äëdelete */
    public function destroy(Post $post)
    {
        //
        $post->delete();
        return back()->with('success', '‡∏•‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå (‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ) ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    }

    /**  POST /manage/post/{id}/restore ‚Äì¬†‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß */
    public function restore($id)
    {
        Post::withTrashed()->findOrFail($id)->restore();
        return back()->with('success', '‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
    }

    /**  POST /api/posts/reorder  (AJAX ‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤ Manage) */
    public function reorder(Request $request)
    {
        $request->validate([
            'updates'               => ['required', 'array'],
            'updates.*.id'          => ['required', 'integer', 'exists:posts,id'],
            'updates.*.order'       => ['required', 'integer', 'min:0'],
            'updates.*.is_public'   => ['required', 'boolean'],
        ]);

        foreach ($request->updates as $u) {
            Post::where('id', $u['id'])->update([
                'order'     => $u['order'],
                'is_public' => $u['is_public'],
            ]);
        }

        return response()->json(['success' => true], 200);
    }

    /*  -----------  ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£  ----------- */
    public function bulkRestore(Request $request)
    {
        $ids = $request->input('ids', []);          //  array¬†‡∏Ç‡∏≠‡∏á¬†ID
        Post::withTrashed()->whereIn('id', $ids)->restore();

        return back()->with('success', '‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
    }

    /*  -----------  ‡∏•‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£  ----------- */
    public function bulkForceDelete(Request $request)
    {
        $ids = $request->input('ids', []);

        $posts = Post::withTrashed()->whereIn('id', $ids)->get();

        foreach ($posts as $post) {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà null ‡∏´‡∏£‡∏∑‡∏≠ string ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤
            if ($post->filename && Storage::disk('public')->exists($post->filename)) {
                // ‡πÉ‡∏ä‡πâ Storage Facade ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå
                Storage::disk('public')->delete($post->filename);
            }
        }

        // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£
        Post::withTrashed()->whereIn('id', $ids)->forceDelete();

        return back()->with('success', '‡∏•‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô storage');
    }
}
