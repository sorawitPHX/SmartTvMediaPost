<?php

namespace App\Http\Controllers;

use App\Models\Post;
use App\Models\SmartTv;
use Exception;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;

class SmartTvController extends Controller
{
    // üì∫ ‡πÅ‡∏™‡∏î‡∏á smartTV ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    public function index()
    {
        $smartTvs = SmartTv::withCount('posts')
        ->orderByDesc('created_at')
        ->get();
        $deletedSmartTvs = SmartTv::onlyTrashed()->get();
        return view(
            'manage.smarttvs',
            compact(
                'smartTvs',
                'deletedSmartTvs'
            )
        );
    }

    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á SmartTV ‡πÉ‡∏´‡∏°‡πà
    public function store(Request $request)
    {
        try {
            $result = SmartTv::create([
                'name' => $request->name,
                'is_public' => $request->is_public
            ]);

            return response()->json([
                'success' => true,
                'message' => '‡∏™‡∏£‡πâ‡∏≤‡∏á Smart TV ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß',
                'result' => $result
            ]);
        } catch (Exception $e) {
            return response()->json([
                'success' => false,
                'message' => $e
            ]);
        }
    }

    // ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç SmartTV
    public function update(Request $request, SmartTv $smarttv)
    {
        // $request->validate([
        //     'name' => 'required|string|max:255',
        // ]);

        try {
            $result = $smarttv->update([
                'name' => $request->name,
                'is_public' => $request->is_public ? true : false
            ]);

            return response()->json([
                'success' => true,
                'message' => '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Smart TV ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß',
                'result' => $result
            ]);
        } catch (Exception $e) {
            return response()->json([
                'error' => true,
                'message' => $e,
            ], 500);
        }
    }

    // üóë ‡∏•‡∏ö SmartTV
    public function destroy(SmartTv $smarttv)
    {
        $smarttv->delete();

        return response()->json([
            'success' => true,
            'message' => '‡∏•‡∏ö Smart TV ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß',
        ]);
    }

    // üìÇ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å TV ‡πÅ‡∏•‡πâ‡∏ß redirect ‡πÑ‡∏õ reuse ‡∏´‡∏ô‡πâ‡∏≤ manage post ‡πÄ‡∏î‡∏¥‡∏°
    public function show(SmartTv $smarttv)
    {
        // ‡πÅ‡∏õ‡∏•‡∏ä‡∏ô‡∏¥‡∏î‡πÇ‡∏û‡∏™‡∏ï‡πå
        $translation = [
            'image' => 'üñºÔ∏è ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û',
            'video' => 'üé• ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠'
        ];

        // ‡∏î‡∏∂‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á SmartTV ‡∏ô‡∏µ‡πâ (‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö)
        $posts = Post::where('smart_tv_id', $smarttv->id)
            ->orderBy('order')
            ->get();

        // ‡∏î‡∏∂‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß (‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞)
        $deleted_posts = Post::where('smart_tv_id', $smarttv->id)
            ->onlyTrashed()
            ->get();

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á view
        return view('manage.posts', compact(
            'translation',
            'posts',
            'deleted_posts',
            'smarttv'
        ));
    }

    public function forceDelete(Request $request): JsonResponse
    {
        // $request->validate([
        //     'ids' => 'required|array',
        //     'ids.*' => 'exists:smart_tvs,id',
        // ]);

        DB::beginTransaction();
        try {
            SmartTv::onlyTrashed()->whereIn('id', $request->ids)->forceDelete();
            DB::commit();
            return response()->json([
                'success' => true,
                'message' => '‡∏•‡∏ö Smart TV ‡∏ñ‡∏≤‡∏ß‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß',
            ]);
        } catch (\Exception $e) {
            DB::rollBack();
            Log::error('SmartTV force delete failed: ' . $e->getMessage());

            return response()->json([
                'success' => false,
                'message' => '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£',
            ]);
        }
    }

    public function restore(Request $request): JsonResponse
    {
        // $request->validate([
        //     'ids' => 'required|array',
        //     'ids.*' => 'exists:smart_tvs,id',
        // ]);

        try {
            SmartTv::onlyTrashed()->whereIn('id', $request->ids)->restore();

            return response()->json([
                'success' => true,
                'message' => '‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô Smart TV ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß',
            ]);
        } catch (\Exception $e) {
            Log::error('SmartTV restore failed: ' . $e->getMessage());

            return response()->json([
                'success' => false,
                'message' => '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô',
            ]);
        }
    }
}
